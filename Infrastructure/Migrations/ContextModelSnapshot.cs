// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Assessments", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long?>("category_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("duration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("published")
                        .HasColumnType("int");

                    b.Property<string>("short_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("updated_by")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("api_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("confirm_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("confirmed_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("display_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("is_banned")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("is_ldap")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("is_verified")
                        .HasColumnType("tinyint");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("otp_created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("password_changed_at")
                        .HasColumnType("datetime2");

                    b.Property<long?>("profile_picture_id")
                        .HasColumnType("bigint");

                    b.Property<string>("remember_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint");

                    b.Property<string>("user_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Domain.Models.assessment_answers", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("question_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.HasIndex("question_id");

                    b.HasIndex("user_id");

                    b.ToTable("assessment_answers");
                });

            modelBuilder.Entity("Domain.Models.assessment_data", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.ToTable("assessment_data");
                });

            modelBuilder.Entity("Domain.Models.assessment_department", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<long?>("group_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.ToTable("assessment_department");
                });

            modelBuilder.Entity("Domain.Models.assessment_enrols", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("result")
                        .HasColumnType("int");

                    b.Property<int?>("score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.HasIndex("user_id");

                    b.ToTable("assessment_enrols");
                });

            modelBuilder.Entity("Domain.Models.assessment_match", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answer_id_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("order")
                        .HasColumnType("int");

                    b.Property<long>("question_id")
                        .HasColumnType("bigint");

                    b.Property<string>("question_id_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("question_id");

                    b.ToTable("assessment_match");
                });

            modelBuilder.Entity("Domain.Models.assessment_meta", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.ToTable("assessment_meta");
                });

            modelBuilder.Entity("Domain.Models.assessment_options", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<int>("correct")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("order")
                        .HasColumnType("int");

                    b.Property<long>("question_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("question_id");

                    b.ToTable("assessment_options");
                });

            modelBuilder.Entity("Domain.Models.assessment_questions", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long?>("category_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("level")
                        .HasColumnType("int");

                    b.Property<int?>("order")
                        .HasColumnType("int");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("assessment_questions");
                });

            modelBuilder.Entity("Domain.Models.assessment_questions_relation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("question_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.HasIndex("question_id");

                    b.ToTable("assessment_questions_relation");
                });

            modelBuilder.Entity("Domain.Models.assessment_sections", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("assessment_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("order")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("assessment_id");

                    b.ToTable("assessment_sections");
                });

            modelBuilder.Entity("Domain.Models.assessment_text", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("order")
                        .HasColumnType("int");

                    b.Property<long>("question_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("question_id");

                    b.ToTable("assessment_text");
                });

            modelBuilder.Entity("Domain.Models.assessment_true_false", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_true")
                        .HasColumnType("bit");

                    b.Property<long>("question_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("question_id");

                    b.ToTable("assessment_true_false");
                });

            modelBuilder.Entity("Domain.Models.assessment_answers", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_answers")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.assessment_questions", "assessment_questions")
                        .WithMany("assessment_answers")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "user")
                        .WithMany("assessment_answers")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");

                    b.Navigation("assessment_questions");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.assessment_data", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_data")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");
                });

            modelBuilder.Entity("Domain.Models.assessment_department", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_department")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");
                });

            modelBuilder.Entity("Domain.Models.assessment_enrols", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_enrols")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "user")
                        .WithMany("assessment_enrols")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.assessment_match", b =>
                {
                    b.HasOne("Domain.Models.assessment_questions", "assessment_questions")
                        .WithMany("assessment_match")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment_questions");
                });

            modelBuilder.Entity("Domain.Models.assessment_meta", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_meta")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");
                });

            modelBuilder.Entity("Domain.Models.assessment_options", b =>
                {
                    b.HasOne("Domain.Models.assessment_questions", "assessment_questions")
                        .WithMany("assessment_options")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment_questions");
                });

            modelBuilder.Entity("Domain.Models.assessment_questions_relation", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_questions_relation")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.assessment_questions", "assessment_questions")
                        .WithMany("assessment_questions_relation")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");

                    b.Navigation("assessment_questions");
                });

            modelBuilder.Entity("Domain.Models.assessment_sections", b =>
                {
                    b.HasOne("Domain.Models.Assessments", "assessment")
                        .WithMany("assessment_sections")
                        .HasForeignKey("assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment");
                });

            modelBuilder.Entity("Domain.Models.assessment_text", b =>
                {
                    b.HasOne("Domain.Models.assessment_questions", "assessment_questions")
                        .WithMany("assessment_text")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment_questions");
                });

            modelBuilder.Entity("Domain.Models.assessment_true_false", b =>
                {
                    b.HasOne("Domain.Models.assessment_questions", "assessment_questions")
                        .WithMany("assessment_true_false")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment_questions");
                });

            modelBuilder.Entity("Domain.Models.Assessments", b =>
                {
                    b.Navigation("assessment_answers");

                    b.Navigation("assessment_data");

                    b.Navigation("assessment_department");

                    b.Navigation("assessment_enrols");

                    b.Navigation("assessment_meta");

                    b.Navigation("assessment_questions_relation");

                    b.Navigation("assessment_sections");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("assessment_answers");

                    b.Navigation("assessment_enrols");
                });

            modelBuilder.Entity("Domain.Models.assessment_questions", b =>
                {
                    b.Navigation("assessment_answers");

                    b.Navigation("assessment_match");

                    b.Navigation("assessment_options");

                    b.Navigation("assessment_questions_relation");

                    b.Navigation("assessment_text");

                    b.Navigation("assessment_true_false");
                });
#pragma warning restore 612, 618
        }
    }
}
